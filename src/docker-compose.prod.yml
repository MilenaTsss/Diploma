services:
  backend:
    build:
      context: ./backend
      target: production
    container_name: django_backend
    working_dir: /backend_app
    env_file:
      - backend/prod.env
    environment:
      - DJANGO_ENV=production
      - DJANGO_LOGLEVEL=info
      - DATABASE_ENGINE=postgresql
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - TZ=Europe/Moscow
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./backend/staticfiles:/backend_app/staticfiles
      - ./backend/logs:/backend_app/logs
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1" ]
      interval: 20s
      timeout: 30s
      retries: 5
      start_period: 10s

  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file:
      - backend/prod.env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - TZ=Europe/Moscow
      - PGTZ=Europe/Moscow
    command: >
      postgres
      -c log_timezone=Europe/Moscow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 20s
      timeout: 30s
      retries: 5
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      target: production
    container_name: react_frontend
    working_dir: /frontend_app
    env_file:
      - frontend/prod.env
    environment:
      - NODE_ENV=production
      - TZ=Europe/Moscow
    depends_on:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:4173/ || exit 1" ]
      interval: 20s
      timeout: 30s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs:ro
      - ./backend/staticfiles:/backend_app/staticfiles
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -fs http://localhost/ && \
           curl -fs http://localhost/admin_panel/ && \
           curl -fs http://localhost/api/health/ && \
           curl -fs http://localhost/kafka_ui/ || exit 1"
      ]
      interval: 20s
      timeout: 30s
      retries: 5
      start_period: 10s

  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    env_file:
      - kafka/kafka.env
    environment:
      - TZ=Europe/Moscow
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 20s
      timeout: 30s
      retries: 5
      start_period: 10s

  kafka-init:
    image: bitnami/kafka:3.9.0
    container_name: kafka-init
    env_file:
      - kafka/kafka.env
    entrypoint: [ "/bin/bash", "-c", "/init_topics.sh" ]
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./kafka/init_topics.sh:/init_topics.sh

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    env_file:
      - kafka/kafka-ui.env
    environment:
      - TZ=Europe/Moscow
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
      - AUTH_TYPE=LOGIN_FORM
      - LOGGING_LEVEL_COM_PROVECTUS=INFO
      - SERVER_SERVLET_CONTEXT_PATH=/kafka_ui
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 8080" ]
      interval: 20s
      timeout: 30s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  kafka_data:
